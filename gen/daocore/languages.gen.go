// Code generated by "script/dtogen". DO NOT EDIT.
package daocore

import (
	"context"
	"database/sql"
	"strings"

	"github.com/Masterminds/squirrel"

	"github.com/UTokyo-PBL/pbl2022-2022-team6/pkg/dberror"
)

const LanguageTableName = "languages"

var LanguageAllColumns = []string{
	"id",
	"language",
}

var LanguageColumnsWOMagics = []string{
	"id",
	"language",
}

var LanguagePrimaryKeyColumns = []string{
	"id",
}

type Language struct {
	ID       int
	Language string
}

func (t *Language) Values() []interface{} {
	return []interface{}{
		t.ID,
		t.Language,
	}
}

func (t *Language) SetMap() map[string]interface{} {
	return map[string]interface{}{
		"id":       t.ID,
		"language": t.Language,
	}
}

func (t *Language) Ptrs() []interface{} {
	return []interface{}{
		&t.ID,
		&t.Language,
	}
}

func IterateLanguage(sc interface{ Scan(...interface{}) error }) (Language, error) {
	t := Language{}
	if err := sc.Scan(t.Ptrs()...); err != nil {
		return Language{}, dberror.MapError(err)
	}
	return t, nil
}

func SelectAllLanguage(ctx context.Context, txn *sql.Tx) ([]*Language, error) {
	query, params, err := squirrel.
		Select(LanguageAllColumns...).
		From(LanguageTableName).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}

	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Language, 0)
	for rows.Next() {
		t, err := IterateLanguage(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func SelectOneLanguageByLanguage(ctx context.Context, txn *sql.Tx, language *string) (Language, error) {
	eq := squirrel.Eq{}
	if language != nil {
		eq["language"] = *language
	}
	query, params, err := squirrel.
		Select(LanguageAllColumns...).
		From(LanguageTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return Language{}, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return Language{}, dberror.MapError(err)
	}
	return IterateLanguage(stmt.QueryRowContext(ctx, params...))
}

func SelectOneLanguageByID(ctx context.Context, txn *sql.Tx, id *int) (Language, error) {
	eq := squirrel.Eq{}
	if id != nil {
		eq["id"] = *id
	}
	query, params, err := squirrel.
		Select(LanguageAllColumns...).
		From(LanguageTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return Language{}, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return Language{}, dberror.MapError(err)
	}
	return IterateLanguage(stmt.QueryRowContext(ctx, params...))
}

func SelectLanguagesByIDs(ctx context.Context, txn *sql.Tx, ids []int) ([]*Language, error) {
	query, params, err := squirrel.
		Select(LanguageAllColumns...).
		From(LanguageTableName).
		Where(squirrel.Eq{
			"id": ids,
		}).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}

	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Language, 0)
	for rows.Next() {
		t, err := IterateLanguage(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func InsertLanguage(ctx context.Context, txn *sql.Tx, records []*Language) error {
	for i := range records {
		if records[i] == nil {
			records = append(records[:i], records[i+1:]...)
		}
	}
	if len(records) == 0 {
		return nil
	}
	sq := squirrel.Insert(LanguageTableName).Columns(LanguageColumnsWOMagics...)
	for _, r := range records {
		if r == nil {
			continue
		}
		sq = sq.Values(r.Values()...)
	}
	query, params, err := sq.ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpdateLanguage(ctx context.Context, txn *sql.Tx, record Language) error {
	sql, params, err := squirrel.Update(LanguageTableName).SetMap(record.SetMap()).
		Where(squirrel.Eq{
			"id": record.ID,
		}).
		ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, sql)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpsertLanguage(ctx context.Context, txn *sql.Tx, record Language) error {
	updateSQL, params, err := squirrel.Update(LanguageTableName).SetMap(record.SetMap()).ToSql()
	if err != nil {
		return err
	}
	updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+LanguageTableName+" SET ")
	query, params, err := squirrel.Insert(LanguageTableName).Columns(LanguageColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func TruncateLanguage(ctx context.Context, txn *sql.Tx) error {
	query := "TRUNCATE TABLE " + LanguageTableName
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteOneLanguageByLanguage(ctx context.Context, txn *sql.Tx, language *string) error {
	eq := squirrel.Eq{}
	if language != nil {
		eq["language"] = *language
	}

	query, params, err := squirrel.
		Delete(LanguageTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteOneLanguageByID(ctx context.Context, txn *sql.Tx, id *int) error {
	eq := squirrel.Eq{}
	if id != nil {
		eq["id"] = *id
	}

	query, params, err := squirrel.
		Delete(LanguageTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}
