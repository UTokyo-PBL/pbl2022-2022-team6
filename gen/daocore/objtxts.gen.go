// Code generated by "script/dtogen". DO NOT EDIT.
package daocore

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"

	"github.com/UTokyo-PBL/pbl2022-2022-team6/pkg/dberror"
)

const ObjtxtTableName = "objtxts"

var ObjtxtAllColumns = []string{
	"id",
	"text",
	"language",
	"sound_url",
	"created_at",
	"updated_at",
}

var ObjtxtColumnsWOMagics = []string{
	"id",
	"text",
	"language",
	"sound_url",
}

var ObjtxtPrimaryKeyColumns = []string{
	"id",
}

type Objtxt struct {
	ID        int
	Text      string
	Language  string
	SoundUrl  string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

func (t *Objtxt) Values() []interface{} {
	return []interface{}{
		t.ID,
		t.Text,
		t.Language,
		t.SoundUrl,
	}
}

func (t *Objtxt) SetMap() map[string]interface{} {
	return map[string]interface{}{
		"id":        t.ID,
		"text":      t.Text,
		"language":  t.Language,
		"sound_url": t.SoundUrl,
	}
}

func (t *Objtxt) Ptrs() []interface{} {
	return []interface{}{
		&t.ID,
		&t.Text,
		&t.Language,
		&t.SoundUrl,
		&t.CreatedAt,
		&t.UpdatedAt,
	}
}

func IterateObjtxt(sc interface{ Scan(...interface{}) error }) (Objtxt, error) {
	t := Objtxt{}
	if err := sc.Scan(t.Ptrs()...); err != nil {
		return Objtxt{}, dberror.MapError(err)
	}
	return t, nil
}

func SelectAllObjtxt(ctx context.Context, txn *sql.Tx) ([]*Objtxt, error) {
	query, params, err := squirrel.
		Select(ObjtxtAllColumns...).
		From(ObjtxtTableName).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}

	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Objtxt, 0)
	for rows.Next() {
		t, err := IterateObjtxt(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func SelectOneObjtxtByID(ctx context.Context, txn *sql.Tx, id *int) (Objtxt, error) {
	eq := squirrel.Eq{}
	if id != nil {
		eq["id"] = *id
	}
	query, params, err := squirrel.
		Select(ObjtxtAllColumns...).
		From(ObjtxtTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return Objtxt{}, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return Objtxt{}, dberror.MapError(err)
	}
	return IterateObjtxt(stmt.QueryRowContext(ctx, params...))
}

func SelectObjtxtsByIDs(ctx context.Context, txn *sql.Tx, ids []int) ([]*Objtxt, error) {
	query, params, err := squirrel.
		Select(ObjtxtAllColumns...).
		From(ObjtxtTableName).
		Where(squirrel.Eq{
			"id": ids,
		}).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}

	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Objtxt, 0)
	for rows.Next() {
		t, err := IterateObjtxt(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func InsertObjtxt(ctx context.Context, txn *sql.Tx, records []*Objtxt) error {
	for i := range records {
		if records[i] == nil {
			records = append(records[:i], records[i+1:]...)
		}
	}
	if len(records) == 0 {
		return nil
	}
	sq := squirrel.Insert(ObjtxtTableName).Columns(ObjtxtColumnsWOMagics...)
	for _, r := range records {
		if r == nil {
			continue
		}
		sq = sq.Values(r.Values()...)
	}
	query, params, err := sq.ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpdateObjtxt(ctx context.Context, txn *sql.Tx, record Objtxt) error {
	sql, params, err := squirrel.Update(ObjtxtTableName).SetMap(record.SetMap()).
		Where(squirrel.Eq{
			"id": record.ID,
		}).
		ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, sql)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpsertObjtxt(ctx context.Context, txn *sql.Tx, record Objtxt) error {
	updateSQL, params, err := squirrel.Update(ObjtxtTableName).SetMap(record.SetMap()).ToSql()
	if err != nil {
		return err
	}
	updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+ObjtxtTableName+" SET ")
	query, params, err := squirrel.Insert(ObjtxtTableName).Columns(ObjtxtColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func TruncateObjtxt(ctx context.Context, txn *sql.Tx) error {
	query := "TRUNCATE TABLE " + ObjtxtTableName
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteOneObjtxtByID(ctx context.Context, txn *sql.Tx, id *int) error {
	eq := squirrel.Eq{}
	if id != nil {
		eq["id"] = *id
	}

	query, params, err := squirrel.
		Delete(ObjtxtTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}
