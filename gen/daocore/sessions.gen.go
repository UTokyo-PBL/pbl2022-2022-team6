// Code generated by "script/dtogen". DO NOT EDIT.
package daocore

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"

	"github.com/UTokyo-PBL/pbl2022-2022-team6/pkg/dberror"
)

const SessionTableName = "sessions"

var SessionAllColumns = []string{
	"session",
	"user_id",
	"created_at",
	"updated_at",
}

var SessionColumnsWOMagics = []string{
	"session",
	"user_id",
}

var SessionPrimaryKeyColumns = []string{
	"session",
}

type Session struct {
	Session   string
	UserID    string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

func (t *Session) Values() []interface{} {
	return []interface{}{
		t.Session,
		t.UserID,
	}
}

func (t *Session) SetMap() map[string]interface{} {
	return map[string]interface{}{
		"session": t.Session,
		"user_id": t.UserID,
	}
}

func (t *Session) Ptrs() []interface{} {
	return []interface{}{
		&t.Session,
		&t.UserID,
		&t.CreatedAt,
		&t.UpdatedAt,
	}
}

func IterateSession(sc interface{ Scan(...interface{}) error }) (Session, error) {
	t := Session{}
	if err := sc.Scan(t.Ptrs()...); err != nil {
		return Session{}, dberror.MapError(err)
	}
	return t, nil
}

func SelectAllSession(ctx context.Context, txn *sql.Tx) ([]*Session, error) {
	query, params, err := squirrel.
		Select(SessionAllColumns...).
		From(SessionTableName).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}

	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Session, 0)
	for rows.Next() {
		t, err := IterateSession(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func SelectOneSessionBySession(ctx context.Context, txn *sql.Tx, session *string) (Session, error) {
	eq := squirrel.Eq{}
	if session != nil {
		eq["session"] = *session
	}
	query, params, err := squirrel.
		Select(SessionAllColumns...).
		From(SessionTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return Session{}, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return Session{}, dberror.MapError(err)
	}
	return IterateSession(stmt.QueryRowContext(ctx, params...))
}

func SelectSessionsBySessions(ctx context.Context, txn *sql.Tx, sessions []string) ([]*Session, error) {
	query, params, err := squirrel.
		Select(SessionAllColumns...).
		From(SessionTableName).
		Where(squirrel.Eq{
			"session": sessions,
		}).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}

	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Session, 0)
	for rows.Next() {
		t, err := IterateSession(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func InsertSession(ctx context.Context, txn *sql.Tx, records []*Session) error {
	for i := range records {
		if records[i] == nil {
			records = append(records[:i], records[i+1:]...)
		}
	}
	if len(records) == 0 {
		return nil
	}
	sq := squirrel.Insert(SessionTableName).Columns(SessionColumnsWOMagics...)
	for _, r := range records {
		if r == nil {
			continue
		}
		sq = sq.Values(r.Values()...)
	}
	query, params, err := sq.ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpdateSession(ctx context.Context, txn *sql.Tx, record Session) error {
	sql, params, err := squirrel.Update(SessionTableName).SetMap(record.SetMap()).
		Where(squirrel.Eq{
			"session": record.Session,
		}).
		ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, sql)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpsertSession(ctx context.Context, txn *sql.Tx, record Session) error {
	updateSQL, params, err := squirrel.Update(SessionTableName).SetMap(record.SetMap()).ToSql()
	if err != nil {
		return err
	}
	updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+SessionTableName+" SET ")
	query, params, err := squirrel.Insert(SessionTableName).Columns(SessionColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func TruncateSession(ctx context.Context, txn *sql.Tx) error {
	query := "TRUNCATE TABLE " + SessionTableName
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteOneSessionBySession(ctx context.Context, txn *sql.Tx, session *string) error {
	eq := squirrel.Eq{}
	if session != nil {
		eq["session"] = *session
	}

	query, params, err := squirrel.
		Delete(SessionTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}
